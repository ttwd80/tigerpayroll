package com.github.ttwd80.tigerpayroll.model.entity;


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name="user"
    ,schema="public"
)
public class User  implements java.io.Serializable {


     private String username;
     private Image image;
     private User userByLastModifiedBy;
     private User userByCreatedBy;
     private String password;
     private boolean locked;
     private Date createdDate;
     private Date lastModifiedDate;
     private Set<Role> rolesForLastModifiedBy = new HashSet<Role>(0);
     private Set<User> usersForLastModifiedBy = new HashSet<User>(0);
     private Set<UserRole> userRolesForLastModifiedBy = new HashSet<UserRole>(0);
     private Set<UserRole> userRolesForUsername = new HashSet<UserRole>(0);
     private Set<User> usersForCreatedBy = new HashSet<User>(0);
     private Set<Image> imagesForCreatedBy = new HashSet<Image>(0);
     private Set<Role> rolesForCreatedBy = new HashSet<Role>(0);
     private Set<Image> imagesForLastModifiedBy = new HashSet<Image>(0);

    public User() {
    }

	
    public User(String username, String password, boolean locked) {
        this.username = username;
        this.password = password;
        this.locked = locked;
    }
    public User(String username, Image image, User userByLastModifiedBy, User userByCreatedBy, String password, boolean locked, Date createdDate, Date lastModifiedDate, Set<Role> rolesForLastModifiedBy, Set<User> usersForLastModifiedBy, Set<UserRole> userRolesForLastModifiedBy, Set<UserRole> userRolesForUsername, Set<User> usersForCreatedBy, Set<Image> imagesForCreatedBy, Set<Role> rolesForCreatedBy, Set<Image> imagesForLastModifiedBy) {
       this.username = username;
       this.image = image;
       this.userByLastModifiedBy = userByLastModifiedBy;
       this.userByCreatedBy = userByCreatedBy;
       this.password = password;
       this.locked = locked;
       this.createdDate = createdDate;
       this.lastModifiedDate = lastModifiedDate;
       this.rolesForLastModifiedBy = rolesForLastModifiedBy;
       this.usersForLastModifiedBy = usersForLastModifiedBy;
       this.userRolesForLastModifiedBy = userRolesForLastModifiedBy;
       this.userRolesForUsername = userRolesForUsername;
       this.usersForCreatedBy = usersForCreatedBy;
       this.imagesForCreatedBy = imagesForCreatedBy;
       this.rolesForCreatedBy = rolesForCreatedBy;
       this.imagesForLastModifiedBy = imagesForLastModifiedBy;
    }
   
     @Id 

    
    @Column(name="username", unique=true, nullable=false, length=20)
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="image_id")
    public Image getImage() {
        return this.image;
    }
    
    public void setImage(Image image) {
        this.image = image;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="last_modified_by")
    public User getUserByLastModifiedBy() {
        return this.userByLastModifiedBy;
    }
    
    public void setUserByLastModifiedBy(User userByLastModifiedBy) {
        this.userByLastModifiedBy = userByLastModifiedBy;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="created_by")
    public User getUserByCreatedBy() {
        return this.userByCreatedBy;
    }
    
    public void setUserByCreatedBy(User userByCreatedBy) {
        this.userByCreatedBy = userByCreatedBy;
    }

    
    @Column(name="password", nullable=false, length=60)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    
    @Column(name="locked", nullable=false)
    public boolean isLocked() {
        return this.locked;
    }
    
    public void setLocked(boolean locked) {
        this.locked = locked;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created_date", length=35)
    public Date getCreatedDate() {
        return this.createdDate;
    }
    
    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="last_modified_date", length=35)
    public Date getLastModifiedDate() {
        return this.lastModifiedDate;
    }
    
    public void setLastModifiedDate(Date lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByLastModifiedBy")
    public Set<Role> getRolesForLastModifiedBy() {
        return this.rolesForLastModifiedBy;
    }
    
    public void setRolesForLastModifiedBy(Set<Role> rolesForLastModifiedBy) {
        this.rolesForLastModifiedBy = rolesForLastModifiedBy;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByLastModifiedBy")
    public Set<User> getUsersForLastModifiedBy() {
        return this.usersForLastModifiedBy;
    }
    
    public void setUsersForLastModifiedBy(Set<User> usersForLastModifiedBy) {
        this.usersForLastModifiedBy = usersForLastModifiedBy;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByLastModifiedBy")
    public Set<UserRole> getUserRolesForLastModifiedBy() {
        return this.userRolesForLastModifiedBy;
    }
    
    public void setUserRolesForLastModifiedBy(Set<UserRole> userRolesForLastModifiedBy) {
        this.userRolesForLastModifiedBy = userRolesForLastModifiedBy;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByUsername")
    public Set<UserRole> getUserRolesForUsername() {
        return this.userRolesForUsername;
    }
    
    public void setUserRolesForUsername(Set<UserRole> userRolesForUsername) {
        this.userRolesForUsername = userRolesForUsername;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByCreatedBy")
    public Set<User> getUsersForCreatedBy() {
        return this.usersForCreatedBy;
    }
    
    public void setUsersForCreatedBy(Set<User> usersForCreatedBy) {
        this.usersForCreatedBy = usersForCreatedBy;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByCreatedBy")
    public Set<Image> getImagesForCreatedBy() {
        return this.imagesForCreatedBy;
    }
    
    public void setImagesForCreatedBy(Set<Image> imagesForCreatedBy) {
        this.imagesForCreatedBy = imagesForCreatedBy;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByCreatedBy")
    public Set<Role> getRolesForCreatedBy() {
        return this.rolesForCreatedBy;
    }
    
    public void setRolesForCreatedBy(Set<Role> rolesForCreatedBy) {
        this.rolesForCreatedBy = rolesForCreatedBy;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="userByLastModifiedBy")
    public Set<Image> getImagesForLastModifiedBy() {
        return this.imagesForLastModifiedBy;
    }
    
    public void setImagesForLastModifiedBy(Set<Image> imagesForLastModifiedBy) {
        this.imagesForLastModifiedBy = imagesForLastModifiedBy;
    }




}


